2023-03-21

데이터베이스 ( Database )

CRUD -

	create
	read	=	select
	update
	delete
	

회원정보 필수 목록 
	-> ID, 이름, 주소, 핸드폰번호	== Column (열)
	
	
DB 비밀번호
	-> test1234
	
ID 는 유니크한 값이다 = primary key ( pk )
	pk 는 null 이 될수없다!

Query = 데이터베이스에 접근해서 명령어를 작성하는것
			INSERT , SELECT 등등등등

read ( select ) = 데이터를 읽어 들이는것.

SELECT * FROM Book WHERE (조건 / 생략가능)

DBMS = 데이터베이스를 관리하는 툴

	데이터 정의어
		-> CREATE , ALTER , DROP
	데이터 조작어
		-> SELECT , INSERT , DELETE, UPDATE
	
	record 는 행 세로 / Column 은 열 가로

	DB는 대소문자를 구분하지않는다.
	
 table 두개이상을 쓸수있게 만드는 명령어 join
	안시 join 위주로 써야함. 대부분 안시 join
	oracle join 은 오라클 내에서만 써서 비추.


무결성 제약에 걸리면 pk 의 중복일 가능성이 높다.



==========================================================

CREATE TABLE Book (		// book 테이블 생성
bookid NUMBER(2) PRIMARY KEY,	// NUMBER 2자리 수까지
bookname VARCHAR2(40),		// VARCHAR2 로 문자열을 40글자 까지 입력하게해줌
publisher VARCHAR2(40),
price NUMBER(8)		// NUMBER 8자리수 까지
);

CREATE TABLE Customer (
custid NUMBER(2) PRIMARY KEY,	// PRIMARY KEY 로 유니크한 값으로 쓰겠다.
name VARCHAR2(40),
address VARCHAR2(50),
phone VARCHAR2(20)	// 핸드폰번호는 문자열로 해준다.
);

CREATE TABLE Orders (	
orderid NUMBER(2) PRIMARY KEY,	
custid NUMBER(2) REFERENCES Customer(custid),	// 다른 테이블에서 내 테이블에서 쓰고싶을때 외래키를 사용한다. 
bookid NUMBER(2) REFERENCES Book(bookid),		// 얘네들은 중복이 가능하다. 프라이머리 키를 사용하지않는다.
saleprice NUMBER(8),
orderdate DATE
);

/* Book, Customer, Orders 데이터 생성 */	// create 에 선언된 순서로 적는다.
INSERT INTO Book VALUES(1, '축구의 역사', '굿스포츠', 7000);
INSERT INTO Book VALUES(2, '축구아는 여자', '나무수', 13000);
INSERT INTO Book VALUES(3, '축구의 이해', '대한미디어', 22000);
INSERT INTO Book VALUES(4, '골프 바이블', '대한미디어', 35000);
INSERT INTO Book VALUES(5, '피겨 교본', '굿스포츠', 8000);
INSERT INTO Book VALUES(6, '역도 단계별기술', '굿스포츠', 6000);
INSERT INTO Book VALUES(7, '야구의 추억', '이상미디어', 20000);
INSERT INTO Book VALUES(8, '야구를 부탁해', '이상미디어', 13000);
INSERT INTO Book VALUES(9, '올림픽 이야기', '삼성당', 7500);
INSERT INTO Book VALUES(10, 'Olympic Champions', 'Pearson', 13000);

INSERT INTO Customer VALUES (1, '박지성', '영국 맨체스타', '000-5000-0001');
INSERT INTO Customer VALUES (2, '김연아', '대한민국 서울', '000-6000-0001');
INSERT INTO Customer VALUES (3, '장미란', '대한민국 강원도', '000-7000-0001');
INSERT INTO Customer VALUES (4, '추신수', '미국 클리블랜드', '000-8000-0001');
INSERT INTO Customer VALUES (5, '박세리', '대한민국 대전', NULL);

INSERT INTO Orders VALUES (1, 1, 1, 6000, TO_DATE('2020-07-01','yyyy-mm-dd'));
INSERT INTO Orders VALUES (2, 1, 3, 21000, TO_DATE('2020-07-03','yyyy-mm-dd'));
INSERT INTO Orders VALUES (3, 2, 5, 8000, TO_DATE('2020-07-03','yyyy-mm-dd'));
INSERT INTO Orders VALUES (4, 3, 6, 6000, TO_DATE('2020-07-04','yyyy-mm-dd'));
INSERT INTO Orders VALUES (5, 4, 7, 20000, TO_DATE('2020-07-05','yyyy-mm-dd'));
INSERT INTO Orders VALUES (6, 1, 2, 12000, TO_DATE('2020-07-07','yyyy-mm-dd'));
INSERT INTO Orders VALUES (7, 4, 8, 13000, TO_DATE('2020-07-07','yyyy-mm-dd'));
INSERT INTO Orders VALUES (8, 3, 10, 12000, TO_DATE('2020-07-08','yyyy-mm-dd'));
INSERT INTO Orders VALUES (9, 2, 10, 7000, TO_DATE('2020-07-09','yyyy-mm-dd'));
INSERT INTO Orders VALUES (10, 3, 8, 13000, TO_DATE('2020-07-10','yyyy-mm-dd'));

CREATE TABLE Imported_Book (
bookid NUMBER,
bookname VARCHAR(40),
publisher VARCHAR(40),
price NUMBER(8)
);

INSERT INTO Imported_Book VALUES(21, 'Zen Golf', 'Pearson', 12000);
INSERT INTO Imported_Book VALUES(22, 'Soccer Skills', 'Human Kinetics', 15000);

COMMIT;

==========================================================

중요 키워드들 !!

select ~ from ~ order by			// 정렬
				group by			// 그룹으로 묶어서 관리
				where	~	like	~
						~	and		~
				

delete ~	  ~	
update ~      ~ 				

select count(*) from	~	where	~	;	// 카운트 값
select max(~) from	~	where	~	;	// 최대값
select min(~) from	~	where	~	;	// 최소값
select sum(~) from	~	where	~	;	// 합
select avg(~) from	~	where	~	;	// 평균


웬만하면 대문자를 쓰자

ANSI JOIN 을 쓴다.

INNER JOIN 

-------------ANSI JOIN-----------------
SELECT E.*, S.STU_NAME, S2.SUB_NAME      --  두개 이상의 값이 있을경우엔 앞에 테이블 . <= 이걸 써준다.
FROM ENROL E
INNER JOIN STUDENT S ON S.STU_NO = E.STU_NO
INNER JOIN SUBJECT S2 ON S2.SUB_NO = E.SUB_NO;

-- 학생들의 성적 테이블 => 컴퓨터 정보 학과의 학생들만 출력하라----
SELECT E.*, S.STU_NAME, S2.SUB_NAME , S.STU_DEPT
FROM ENROL E
INNER JOIN STUDENT S ON S.STU_NO = E.STU_NO
INNER JOIN SUBJECT S2 ON S2.SUB_NO = E.SUB_NO
WHERE S.STU_DEPT LIKE ('%컴퓨터정보%');

SUB QUERY = 쿼리안에 쿼리가 들어가는것

-- 점수가 전체평균보다 높은 점수를 받은 목록 출력--
SELECT STU_NAME , ENR_GRADE , ROUND(AVG_ALL, 2)
FROM STUDENT S
INNER JOIN ENROL E ON S.STU_NO = E.STU_NO
INNER JOIN (
    SELECT AVG(ENR_GRADE) AS AVG_ALL FROM ENROL
    ) A ON E.ENR_GRADE > A.AVG_ALL;

